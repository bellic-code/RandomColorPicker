unit ColorLabelPicker_u;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, ComCtrls, Buttons, CheckLst;

type
  TfrmColorLabelPicker = class(TForm)
    btnColorPicker: TButton;
    shpColorVisual: TShape;
    pgc1: TPageControl;
    tsColorPicker: TTabSheet;
    tsSettings: TTabSheet;
    chklstColorOptions: TCheckListBox;
    bmbColorListRefresh: TBitBtn;
    lblColorPickerHeader: TLabel;
    procedure btnColorPickerClick(Sender: TObject);
    procedure bmbColorListRefreshClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmColorLabelPicker: TfrmColorLabelPicker;
  arrChosenColors : array of string;
implementation

{$R *.dfm}

procedure TfrmColorLabelPicker.bmbColorListRefreshClick(Sender: TObject);
var
  I: Integer;
begin
Finalize(arrChosenColors);
SetLength(arrChosenColors, 1);

for I := 0 to chklstColorOptions.Count - 1 do
begin
if chklstColorOptions.Checked[I] = True then
  begin
    arrChosenColors[High(arrChosenColors)]:= (chklstColorOptions.Items[I]);
    SetLength(arrChosenColors, Length(arrChosenColors) + 1);
  end;
end;
end;


procedure TfrmColorLabelPicker.btnColorPickerClick(Sender: TObject);
var
  iIndex : Integer;
  sColor : string;
  col : TColor;
begin
try
begin
  Randomize;
  iIndex := Random(Length(arrChosenColors));
  sColor := 'cl'+ arrChosenColors[iIndex];
  col := StringToColor(sColor);

  shpColorVisual.Brush.Color := col;
end;
except
  ShowMessage('No colors are selected!');
end;
end;

end.
